#!/usr/bin/python
from optparse import OptionParser, make_option
import sys
import dbus


def main(options,args):
    bus = dbus.SystemBus()
    if (len(args) < 1):
        print("Usage: %s <command>" % (sys.argv[0]))
        print("")
        print("  info")
        print("  add [Id] [Name] [Address]")
        print("  remove [slave path]")
        return 1

    cmd = args[0]
    if (options.path):
        path = options.path
    else:
        path = "/"

    obj = bus.get_object("br.org.cesar.modbus", path)
    props = dbus.Interface(obj, "org.freedesktop.DBus.Properties")
    manager = dbus.Interface(obj, "br.org.cesar.modbus.Manager1")

    if (cmd == "info"):
        print (props.GetAll("br.org.cesar.modbus.Manager1"))
        return 0

    if (cmd == "add"):
        print ("Adding slave:")
        print ("  Id:  %s (1 - 247)" % args[1])
        print ("  Name:  %s" % args[2])
        print ("  Address:  %s (host:port)" % args[3])
        idval = dbus.Byte(int(args[1]))
        nameval = dbus.String(args[2])
        addrval = dbus.String(args[3])
        slave_dict = dict()
        slave_dict.update({"Id": idval})
        slave_dict.update({"Name": nameval})
        slave_dict.update({"Address": addrval})
        dbus_dict = dbus.Dictionary(slave_dict, signature='sv')
        path = manager.AddSlave(dbus_dict);
        print ("PATH: %s" % path)
        slave = dbus.Interface(obj, "org.freedesktop.DBus.Properties")
        slave.Set("br.org.cesar.modbus.Slave1", "Enable", True)
        return 0

    if (cmd == "remove"):
        print ("Removing slave %s" % args[1])
        devpath = dbus.ObjectPath(args[1])
        print (manager.RemoveSlave(devpath))
        return 0

    if (cmd == "enable"):
        print ("PATH: %s" % path)
        enable = dbus.Boolean(args[1])
        slave = dbus.Interface(obj, "org.freedesktop.DBus.Properties")
        slave.Set("br.org.cesar.modbus.Slave1", "Enable", enable)
        return 0


if __name__ == "__main__":
    option_list = [ make_option("-p", "--path", action="store", type="string",
                                dest="path"), ]
    parser = OptionParser(option_list=option_list)
    (options, args) = parser.parse_args()
    ret = main(options, args)
    sys.exit(ret)
